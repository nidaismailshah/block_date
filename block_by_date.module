<?php

/**
 * @file
 * Enhanced control over the dates of any Block.
 *
 * Block dates allows users to add dates to any block through the block's
 * configuration interface. This implementation is based on date settings stored
 * in separate table called 'block_by_date'
 */

/*
 * Defining Block from date value.
 */
define('BLOCK_BY_DATE_FROM_DATE_DEFAULT_INIT', NULL);
/*
 * Defining Block to date value.
 */
define('BLOCK_BY_DATE_TO_DATE_DEFAULT_INIT', NULL);
/**
 * Implements hook_help().
 */
function block_by_date_help($path, $arg) {
  switch ($path) {
    case 'admin/help#block_by_date':
      $output = '';
      $output .= '<p>' . t('The block by date module provides date visibility settings to block. Adding a new block or updating existing block with new date settings is possible.So that based on the given from and to dates the block will be visible.') . '</p>';
      $output .= '<p>' . t('You can display the block between given dates Or you can enter only from date means the block will be visible from given date.') . '</p>';
      return $output;
  }
}
/**
 * Implements hook_permission().
 */
function block_by_date_permission() {
  return array(
    'administer block dates' => array(
      'title' => t('Administer block dates'),
      'description' => t('Set date limit for blocks.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function block_by_date_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('administer block dates') && ($form_id == 'block_admin_configure' || $form_id == 'block_add_block_form')) {
    // Load statically cached block object used to display
    // default from and to dates.
    $block = block_load($form['module']['#value'], $form['delta']['#value']);

    // Adding date fieldset to the block configure page.
    $form['visibility']['dates_between'] = array(
      '#type' => 'fieldset',
      '#title' => 'Date & Time',
      '#weight' => 30,
      '#collapsible' => TRUE,
      '#group' => ' visibility',
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'block_by_date') . '/block_by_date.js'),
      ),
    );
    $form['visibility']['dates_between']['from_date'] = array(
      '#type' => module_exists('date_popup') ? 'date_popup' : 'date_select' ,
      '#title' => t('From Date'),
      '#date_format' => 'Y-m-d H:i',
      '#date_year_range' => '-3:+3',
      '#default_value' => isset($block->from_date) ? $block->from_date : variable_get('block_refresh_default_automatic_from_date', BLOCK_BY_DATE_FROM_DATE_DEFAULT_INIT),
      '#description' => t('If you specify only from date, the block will be visible on that date onwards.'),
    );
    $form['visibility']['dates_between']['enable_end_date'] = array(
      '#type' => 'checkbox',
      '#title' => t('Collect an End Date'),
      '#default_value' => !empty($block->to_date) ? TRUE : FALSE,
      '#description' => t('E.g., Allow this block to appear on September 15, and end on September 16.'),
    );
    $form['visibility']['dates_between']['to_date'] = array(
      '#type' => module_exists('date_popup') ? 'date_popup' : 'date_select',
      '#title' => 'To Date',
      '#date_format' => 'Y-m-d H:i',
      '#date_year_range' => '-3:+3',
      '#default_value' => isset($block->to_date) ? $block->to_date : variable_get('block_refresh_default_automatic_from_date', BLOCK_BY_DATE_TO_DATE_DEFAULT_INIT),
      '#required' => (isset($form_state["values"]["enable_end_date"]) ? ($form_state["values"]["enable_end_date"] == TRUE ? TRUE : FALSE) : FALSE),
      '#states' => array(
        'visible' => array(
          ':input[name="enable_end_date"]' => array('checked' => TRUE),
        ),
      ),
    );
    // Add validation handler.
    $form['#validate'][] = 'block_by_date_alter_validate_settings';
    // Add submission handler.
    $form['#submit'][] = 'block_by_date_form_submit';
  }
}

/**
 * Validation callback. Validates date settings per block.
 *
 * @see block_by_date_form_alter()
 * @see block_by_date_alter_save_settings()
 */
function block_by_date_alter_validate_settings($form, &$form_state) {
  $from_date = '';
  $to_date = '';
  if (isset($form_state['values']['from_date'])) {
    $from_date = $form_state['values']['from_date'];
  }
  if (isset($form_state['values']['to_date'])) {
    $to_date = $form_state['values']['to_date'];
  }
  if (!module_exists('date_popup')) {
    // Partial from date validation.
    if ($from_date == variable_get('block_refresh_default_automatic_from_date', BLOCK_BY_DATE_FROM_DATE_DEFAULT_INIT)) {
      // Building array with submitted from date values to validate
      // partial dates.
      $date_array = array();
      $from_date_arr = $form['visibility']['dates_between']['from_date'];
      $date_array['date_year'] = $from_date_arr['year']['#value'];
      $date_array['date_moth'] = $from_date_arr['month']['#value'];
      $date_array['date_day'] = $from_date_arr['day']['#value'];
      $date_array['date_hour'] = $from_date_arr['hour']['#value'];
      $date_array['date_minute'] = $from_date_arr['minute']['#value'];
      $date_array_count = count(array_filter($date_array));
      if ($date_array_count > 0 && $date_array_count != count($date_array)) {
        form_set_error('from_date', t('A valid date is required for From Date.'));
      }
    }
  }
  if ($form_state['values']['module'] == 'block') {
    // Throwing error empty to date error if 'Collect an End Date'
    // checkbox enabled.
    // Else if checking from date is lessa than to date or not.
    // Else if checking equal dates.
    if ($form_state['values']['enable_end_date'] == 1 && $to_date == variable_get('block_refresh_default_automatic_to_date', BLOCK_BY_DATE_TO_DATE_DEFAULT_INIT)) {
      form_set_error('to_date', t('A valid date is required for To Date.'));
    }
    if (!empty($to_date) && (strtotime($from_date) > strtotime($to_date))) {
      form_set_error('dates_between', t('Ensure that from date is always less than to date.'));
    }
    elseif (!empty($from_date) && !empty($to_date) && (strtotime($from_date) == strtotime($to_date))) {
      form_set_error('dates_between', t('from and to date-time values should not equal'));
    }
  }
}

/**
 * Submit callback. Saves date settings per block.
 *
 * @see block_by_date_form_alter()
 */
function block_by_date_form_submit($form, &$form_state) {
  if ($form_state['values']['form_id'] == 'block_admin_configure' || 
    $form_state['values']['form_id'] == 'block_add_block_form') {
    $dates = array();
    if ($form_state['values']['from_date'] != '') {
      $dates['from_date'] = $form_state['values']['from_date'];
    }
    else {
      $dates['from_date'] = variable_get('block_refresh_default_automatic_from_date', BLOCK_BY_DATE_FROM_DATE_DEFAULT_INIT);
    }
    if ($form_state['values']['enable_end_date'] == 1) {
      $dates['to_date'] = $form_state['values']['to_date'];
    }
    else {
      $dates['to_date'] = variable_get('block_refresh_default_automatic_to_date', BLOCK_BY_DATE_TO_DATE_DEFAULT_INIT);
    }
    db_update('block')
        ->fields($dates)
        ->condition('module', $form_state['values']['module'])
        ->condition('delta', $form_state['values']['delta'])
        ->execute();
  }
}

/**
 * Implements hook_block_list_alter().
 *
 * Checks the date visibility settings.
 * Removes the block if the visibility conditions are not met.
 */
function block_by_date_block_list_alter(&$blocks) {
  foreach ($blocks as $key => $block) {
    $current_date = format_date(strtotime(date('Y-m-d H:i')), 'custom',
    'Y-m-d H:i', variable_get('date_default_timezone', 0));
    $default_value_from = $block->from_date;
    $default_value_to = $block->to_date;
    if (!empty($default_value_from) && !empty($default_value_to)) {
      if ((strtotime($current_date) >= strtotime($default_value_from)) &&
      (strtotime($current_date) <= strtotime($default_value_to))) {
        // Nothing. Block will be visible.
      }
      else {
        // Disabling block.
        unset($blocks[$key]);
      }
    }
    elseif (!empty($default_value_from) && empty($default_value_to)) {
      if (strtotime($current_date) >= strtotime($default_value_from)) {
        // Nothing. Block will be visible.
      }
      else {
        // Disabling block.
        unset($blocks[$key]);
      }
    }
  }
}
